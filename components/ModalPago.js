/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import { TextField, Button, Dialog } from "@mui/material";
import { styled } from "@mui/material/styles";
import { prependOnceListener } from "process";

const Pago1 = styled("div")(({ theme }) => ({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  boxShadow: `0px 1px 18px rgba(0, 0, 0, 0.12), 0px 6px 10px rgba(0, 0, 0, 0.14), 0px 3px 5px rgba(0, 0, 0, 0.2)`,
  borderRadius: `8px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  height: `565px`,
  width: `500px`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
}));

const Content = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `40px 40px 12px 40px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `0px`,
});

const Frame2 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Frame1 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const NameAndTitle = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `380px`,
  margin: `0px`,
});

const ContratarEmpleado = styled("div")(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(0, 0, 0, 0.87)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `700`,
  fontSize: `24px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Frame21 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const NameAndTitle1 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `380px`,
  margin: `0px`,
});

const JuliancitoSVendingMa = styled("div")({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(25, 118, 210, 1)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `400`,
  fontSize: `14px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Details = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 10px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `7px 0px 0px 0px`,
});

const Frame11 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `0px`,
});

const SeRecomiendaPagarCon = styled("div")({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(158, 158, 158, 1)`,
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `400`,
  fontSize: `14px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Quinientos = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `8px 0px 0px 0px`,
});

const TextFieldStandard = styled(TextField)({
  flexGrow: `1`,
  margin: `0px`,
});

const TextFieldStandard1 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px 0px 0px 5px`,
});

const Quinientos1 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `8px 0px 0px 0px`,
});

const TextFieldStandard2 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px`,
});

const TextFieldStandard3 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px 0px 0px 5px`,
});

const TextFieldStandard4 = styled(TextField)({
  width: `185px`,
  margin: `8px 0px 0px 0px`,
});

const Inputs = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `8px 0px 0px 0px`,
});

const Frame12 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  height: `53px`,
  margin: `0px`,
});

const TextFieldStandard5 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px`,
});

const TextFieldStandard6 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px 0px 0px 5px`,
});

const Frame22 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  height: `53px`,
  margin: `5px 0px 0px 0px`,
});

const TextFieldStandard7 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px`,
});

const TextFieldStandard8 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px 0px 0px 5px`,
});

const Frame32 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `5px 0px 0px 0px`,
});

const TextFieldStandard9 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px`,
});

const TextFieldStandard10 = styled(TextField)({
  flexGrow: `1`,
  margin: `0px 0px 0px 5px`,
});

const Cta = styled("div")(({ theme }) => ({
  backgroundColor: `rgba(0, 0, 0, 0.04)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `center`,
  padding: `20px 40px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Links = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-end`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `420px`,
});

const Link1 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Cancelar = styled("div")(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(25, 118, 210, 1)`,
  fontStyle: `normal`,
  fontFamily: `Roboto`,
  fontWeight: `400`,
  fontSize: `16px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `150%`,
  textTransform: `none`,
  margin: `0px`,
}));

const ButtonContained = styled(Button)({
  margin: `0px 0px 0px 30px`,
});

function Pago(props) {
  return (
    <Dialog open={props.isOpen} onClose={props.setIsOpen(false)}>
      <Pago1>
        <Content>
          <Frame2>
            <Frame1>
              <NameAndTitle>
                <ContratarEmpleado>{`Desglose del Pago`}</ContratarEmpleado>
              </NameAndTitle>
            </Frame1>
            <Frame21>
              <NameAndTitle1>
                <JuliancitoSVendingMa>
                  {`Juliancito's Vending Machine`}
                </JuliancitoSVendingMa>
              </NameAndTitle1>
            </Frame21>
          </Frame2>
          <Details>
            <Frame11>
              <SeRecomiendaPagarCon>
                {`Se recomienda pagar con las siguientes monedas:`}
              </SeRecomiendaPagarCon>
              <Quinientos>
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={props.data[0] ? props.data[0].amount : 0}
                  disabled={true}
                />
                <TextFieldStandard1
                  variant="standard"
                  size="small"
                  label={props.data[1] ? props.data[1].amount : 0}
                  disabled={true}
                />
              </Quinientos>
              <Quinientos1>
                <TextFieldStandard2
                  variant="standard"
                  size="small"
                  label={props.data[3] ? props.data[3].amount : 0}
                  disabled={true}
                />
                <TextFieldStandard3
                  variant="standard"
                  size="small"
                  label={props.data[4] ? props.data[4].amount : 0}
                  disabled={true}
                />
              </Quinientos1>
              <TextFieldStandard4
                variant="standard"
                size="small"
                label={[props.total]}
                disabled={true}
              />
            </Frame11>
            <Inputs>
              <Frame12>
                <TextFieldStandard5
                  variant="standard"
                  size="small"
                  label={`0`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
                <TextFieldStandard6
                  variant="standard"
                  size="small"
                  label={`0`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
              </Frame12>
              <Frame22>
                <TextFieldStandard7
                  variant="standard"
                  size="small"
                  label={`0`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
                <TextFieldStandard8
                  variant="standard"
                  size="small"
                  label={`0`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
              </Frame22>
              <Frame32>
                <TextFieldStandard9
                  variant="standard"
                  size="small"
                  label={`0`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
                <TextFieldStandard10
                  variant="standard"
                  size="small"
                  label={`Solo se aceptan de 1.000`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
              </Frame32>
            </Inputs>
          </Details>
        </Content>
        <Cta>
          <Links>
            <Link1>
              <Cancelar>{`Cancelar`}</Cancelar>
            </Link1>
            <ButtonContained
              variant="contained"
              size="large"
              color="primary"
              onClick={props.setIsOpen(false)}
            >
              {" "}
              PAGAR{" "}
            </ButtonContained>
          </Links>
        </Cta>
      </Pago1>
    </Dialog>
  );
}

export default Pago;
