/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preseve that abilty, always export from Quest to regenerate this file.
 *   To setup props, bindings and actions, use the Quest editor
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import { TextField, Button, Dialog } from "@mui/material";
import { styled } from "@mui/material/styles";

const Pago1 = styled("div")(({ theme }) => ({
  backgroundColor: `rgba(255, 255, 255, 1)`,
  boxShadow: `0px 1px 18px rgba(0, 0, 0, 0.12), 0px 6px 10px rgba(0, 0, 0, 0.14), 0px 3px 5px rgba(0, 0, 0, 0.2)`,
  borderRadius: `8px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  height: `565px`,
  width: `500px`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
}));

const Content = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `40px 40px 12px 40px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `0px`,
});

const Frame2 = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Title = styled("div")(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(0, 0, 0, 0.87)`,
  fontSize: `24px`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const JuliancitoSVendingMa = styled("div")({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(25, 118, 210, 1)`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Details = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px 10px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `7px 0px 0px 0px`,
});

const Coins = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `0px`,
});

const Comment = styled("div")({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(158, 158, 158, 1)`,
  letterSpacing: `0px`,
  textDecoration: `none`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const TextFieldStandard = styled(TextField)({
  flexGrow: `1`,
  margin: `0px 0px 0px 5px`,
});

const Inputs = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  flexGrow: `1`,
  margin: `8px 0px 0px 0px`,
});

const Items = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `5px 0px 0px 0px`,
});

const Cta = styled("div")(({ theme }) => ({
  backgroundColor: `rgba(0, 0, 0, 0.04)`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `center`,
  padding: `20px 40px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
}));

const Links = styled("div")({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-end`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `420px`,
});

const Cancelar = styled("div")(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  color: `rgba(25, 118, 210, 1)`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `150%`,
  textTransform: `none`,
  margin: `0px`,
}));

const ButtonContained = styled(Button)({
  margin: `0px 0px 0px 30px`,
});

function Pago(props) {
  return (
    <Dialog open={props.isOpen} onClose={() => props.setIsOpen(false)}>
      <Pago1>
        <Content>
          <Frame2>
            <Title>{`Desglose del Pago`}</Title>
            <JuliancitoSVendingMa>
              {`Juliancito's Vending Machine`}
            </JuliancitoSVendingMa>
          </Frame2>
          <Details>
            <Coins>
              <Comment>
                {`Se recomienda pagar con las siguientes monedas:`}
              </Comment>
              <Items>
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Quinientos`}
                  value={props.data[0].amount}
                  disabled
                />
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Cien`}
                  value={props.data[1].amount}
                  disabled
                />
              </Items>
              <Items>
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Cincuenta`}
                  value={props.data[2].amount}
                  disabled
                />
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Veinticinco`}
                  value={props.data[3].amount}
                  disabled
                />
              </Items>
              <TextFieldStandard
                variant="standard"
                size="small"
                label={`TOTAL`}
                value={props.total}
                disabled
              />
            </Coins>
            <Inputs>
              <Items>
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Quinientos`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Cien`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
              </Items>
              <Items>
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Cincuenta`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Veinticinco`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
              </Items>
              <Items>
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Billetes`}
                  type="number"
                  onInput={(e) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 2);
                  }}
                />
                <TextFieldStandard
                  variant="standard"
                  size="small"
                  label={`Solo se aceptan de 1.000`}
                  disabled
                />
              </Items>
            </Inputs>
          </Details>
        </Content>
        <Cta>
          <Links>
            <Cancelar>{`Cancelar`}</Cancelar>
            <ButtonContained variant="contained" size="large" color="primary">
              {" "}
              PAGAR{" "}
            </ButtonContained>
          </Links>
        </Cta>
      </Pago1>
    </Dialog>
  );
}

export default Pago;
